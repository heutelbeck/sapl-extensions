#
# Copyright Â© 2017-2024 Dominic Heutelbeck (dominic@heutelbeck.com)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# Note: when updating actions version pinning can be done using:
# https://app.stepsecurity.io/secureworkflow before committing the changes.

name: Build

on:
  workflow_dispatch:
  push:
    branches: [main]

jobs:
  tests:
    strategy:
      matrix:
        java: [ '17' ]
        os: [ubuntu-latest]
    name: Unit Tests (JDK ${{ matrix.java }} on ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30

    steps:
    - name: Check out
      uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
      with:
        lfs: true
        fetch-depth: 0

    - name: Set up JDK ${{ matrix.java }}
      uses: actions/setup-java@387ac29b308b003ca37ba93a6cab5eb57c8f5f93 # v4.0.0
      with:
        distribution: 'temurin'
        java-version: ${{ matrix.java }}
        cache: 'maven'
        
    - name: Set up Web3j in case servers for releases should be unreachable
      run: |
        mkdir ~/.web3j
        mkdir ~/.web3j/solc
        cp sapl-demo-ethereum/src/main/solc/releases.json ~/.web3j/solc

    - name: Run tests
      run: mvn -B package

    - name: Javadoc on Libraries, Ignoring Demos
      run: mvn -B package javadoc:jar -DskipTRests -pl !sapl-demo-vaadin,!sapl-demo-ethereum,!sapl-demo-axon
  
    - name: Clean up local repository before caching (Linux/Mac)
      if: ${{ matrix.os != 'windows-latest'}}
      run: rm -rf ~/.m2/repository/io/sapl

    - name: Clean up local repository before caching (Win)
      if: ${{ matrix.os == 'windows-latest'}}
      run: rm -Recurse -Force ~/.m2/repository/io/sapl
          
  analyze:
    needs: [tests]
    name: Code Analysis, Test Coverage, Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 35
    
    steps:
    - name: Check out
      uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
      with:
        lfs: true
        # avoid shallow clone to ensure correct sonarqube auto assignment of blame
        fetch-depth: 0

    - name: Set up JDK 17
      uses: actions/setup-java@387ac29b308b003ca37ba93a6cab5eb57c8f5f93 # v4.0.0
      with:
        distribution: temurin
        java-version: 17
        cache: 'maven'

    - name: Set up Web3j in case servers for releases should be unreachable
      run: |
        mkdir ~/.web3j
        mkdir ~/.web3j/solc
        cp sapl-demo-ethereum/src/main/solc/releases.json ~/.web3j/solc
      
#    - name: Run analysis (Unit Tests, IT, JaCoCo, Sonar)    
#      env:
#        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#      run: mvn -B clean verify sonar:sonar failsafe:integration-test -Pcoverage,it  -Dsonar.login=${SONAR_TOKEN}

    - name: Delete workflow runs
      uses: Mattraks/delete-workflow-runs@99626ea7e2020a8ab987073a1e127e2597102694 # v2
      with:
        token: ${{ github.token }}
        repository: ${{ github.repository }}
        retain_days: 1
        keep_minimum_runs: 6

    - name: Clean up local repository before caching (Linux/Mac)
      if: ${{ matrix.os != 'windows-latest'}}
      run: rm -rf ~/.m2/repository/io/sapl

    - name: Clean up local repository before caching (Win)
      if: ${{ matrix.os == 'windows-latest'}}
      run: rm -Recurse -Force ~/.m2/repository/io/sapl

  deploy:
    needs: [analyze]
    name: Deploy to central
    runs-on: ubuntu-latest
    timeout-minutes: 35
    
    steps:
    - name: Check out
      uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
      with:
        lfs: true
        fetch-depth: 0

    - name: Set up JDK 17
      uses: actions/setup-java@387ac29b308b003ca37ba93a6cab5eb57c8f5f93 # v4.0.0
      with:
        distribution: temurin
        java-version: 17
        cache: 'maven'

    - name: Set up Web3j in case servers for releases should be unreachable
      run: |
        mkdir ~/.web3j
        mkdir ~/.web3j/solc
        cp sapl-demo-ethereum/src/main/solc/releases.json ~/.web3j/solc

    - name: Configure servers
      uses: s4u/maven-settings-action@7802f6aec16c9098b4798ad1f1d8ac75198194bd # v3.0.0
      with:
        githubServer: false
        servers: |
          [{
              "id": "ossrh",
              "username": "${{ secrets.OSSRH_USERNAME }}",
              "password": "${{ secrets.OSSRH_PASSWORD }}"
           },{
              "id": "ghcr.io",
              "username": "${{ secrets.GHUB_USERNAME }}",
              "password": "${{ secrets.GHUB_ACCESS_TOKEN }}"
           },{
              "id": "github",
              "username": "${{ secrets.GHUB_USERNAME }}",
              "password": "${{ secrets.GHUB_ACCESS_TOKEN }}"
           }]

    - name: Install GPG Code Signing Key
      run: |
        cat <(echo -e "${{ secrets.OSSRH_GPG_SECRET_KEY }}") | gpg --batch --import
        gpg --list-secret-keys --keyid-format LONG

    - name: Deploy Maven artefacts
      run: mvn -B --no-transfer-progress -Dgpg.passphrase=${{ secrets.OSSRH_GPG_SECRET_KEY_PASSWORD }} -Ppublish -DskipTests clean package deploy

    - name: Trigger CI build of downstream repositories
      run: |
        curl -XPOST -u "${{ secrets.GHUB_USERNAME }}:${{ secrets.GHUB_ACCESS_TOKEN }}" -H "Accept: application/vnd.github.everest-preview+json" -H "Content-Type: application/json" https://api.github.com/repos/heutelbeck/sapl-demos/dispatches --data '{"event_type": "build_application"}'
        curl -XPOST -u "${{ secrets.GHUB_USERNAME }}:${{ secrets.GHUB_ACCESS_TOKEN }}" -H "Accept: application/vnd.github.everest-preview+json" -H "Content-Type: application/json" https://api.github.com/repos/heutelbeck/sapl-server/dispatches --data '{"event_type": "build_application"}'
        curl -XPOST -u "${{ secrets.GHUB_USERNAME }}:${{ secrets.GHUB_ACCESS_TOKEN }}" -H "Accept: application/vnd.github.everest-preview+json" -H "Content-Type: application/json" https://api.github.com/repos/heutelbeck/sapl-extensions/dispatches --data '{"event_type": "build_application"}'
        curl -XPOST -u "${{ secrets.GHUB_USERNAME }}:${{ secrets.GHUB_ACCESS_TOKEN }}" -H "Accept: application/vnd.github.everest-preview+json" -H "Content-Type: application/json" https://api.github.com/repos/heutelbeck/sapl-benchmark/dispatches --data '{"event_type": "build_application"}'
        
    - name: Clean up local repository before caching 
      run: rm -rf ~/.m2/repository/io/sapl
